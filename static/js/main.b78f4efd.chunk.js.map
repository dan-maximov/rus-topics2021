{"version":3,"sources":["useRandomTopics.js","App.js","reportWebVitals.js","index.js"],"names":["idOrder","getRandomIndex","arrayLength","Math","max","ceil","random","initialState","zabveniuNePodlejit","topics","length","yaIDrugie","vremyaPeremen","razgovorSSoboy","mejduProshlimIBudushem","Header","Layout","Content","Footer","App","useState","rawCurrentTopics","setCurrentTopics","map","id","title","topicDictionary","topic","previousTopics","Object","keys","reduce","acc","key","useRandomTopics","currentTopics","generateNewTopics","className","Title","level","itemLayout","dataSource","renderItem","item","Item","Meta","description","onClick","style","textAlign","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAIMA,EAAU,CACd,qBACA,YACA,gBACA,iBACA,0BAGIC,EAAiB,SAACC,GACtB,OAAOC,KAAKC,IAAID,KAAKE,KAAKF,KAAKG,SAAWJ,GAAc,GAAK,GAGzDK,EAAe,CACnBC,mBAAoBP,EAAeQ,EAAOD,mBAAmBE,QAC7DC,UAAWV,EAAeQ,EAAOE,UAAUD,QAC3CE,cAAeX,EAAeQ,EAAOG,cAAcF,QACnDG,eAAgBZ,EAAeQ,EAAOI,eAAeH,QACrDI,uBAAwBb,EAAeQ,EAAOK,uBAAuBJ,S,iBChB/DK,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAEV,SAASC,IAAO,IAAD,EDiBC,WAAO,IAAD,EACUC,mBAASb,GADnB,mBAC5Bc,EAD4B,KACVC,EADU,KAmBnC,MAAO,CAPetB,EAAQuB,KAAI,SAACC,GACjC,MAAO,CACLC,MAAOC,EAAgBF,GACvBG,MAAOlB,EAAOe,GAAIH,EAAiBG,QAZb,WACxBF,GAAiB,SAACM,GAAD,OACfC,OAAOC,KAAKF,GAAgBG,QAC1B,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAMhC,EAAeQ,EAAOwB,GAAKvB,YAC3D,SCvBqCwB,GADf,mBACrBC,EADqB,KACNC,EADM,KAG5B,OACE,eAAC,IAAD,CAAQC,UAAU,SAAlB,UACE,cAACtB,EAAD,CAAQsB,UAAU,SAAlB,SACE,cAAC,IAAWC,MAAZ,CAAkBC,MAAO,EAAGF,UAAU,QAAtC,+NAIF,eAACpB,EAAD,CAASoB,UAAU,UAAnB,UACE,cAAC,IAAD,CACEG,WAAW,aACXC,WAAYN,EACZO,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CAAgBpB,MAAOkB,EAAKlB,MAAOqB,YAAaH,EAAKhB,aAI3D,cAAC,IAAD,CAAQoB,QAASX,EAAjB,6JAEF,cAAClB,EAAD,CAAQ8B,MAAO,CAAEC,UAAW,UAA5B,SACE,mBAAGC,KAAK,iCAAiCC,IAAI,sBAAsBC,OAAO,SAA1E,sCC9BR,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7C,EAAD,MAEF8C,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b78f4efd.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport topics from \"./topics.json\";\nimport topicDictionary from \"./topicDictionary.json\";\n\nconst idOrder = [\n  \"zabveniuNePodlejit\",\n  \"yaIDrugie\",\n  \"vremyaPeremen\",\n  \"razgovorSSoboy\",\n  \"mejduProshlimIBudushem\"\n];\n\nconst getRandomIndex = (arrayLength) => {\n  return Math.max(Math.ceil(Math.random() * arrayLength), 1) - 1;\n};\n\nconst initialState = {\n  zabveniuNePodlejit: getRandomIndex(topics.zabveniuNePodlejit.length),\n  yaIDrugie: getRandomIndex(topics.yaIDrugie.length),\n  vremyaPeremen: getRandomIndex(topics.vremyaPeremen.length),\n  razgovorSSoboy: getRandomIndex(topics.razgovorSSoboy.length),\n  mejduProshlimIBudushem: getRandomIndex(topics.mejduProshlimIBudushem.length)\n};\n\nexport const useRandomTopics = () => {\n  const [rawCurrentTopics, setCurrentTopics] = useState(initialState);\n\n  const generateNewTopics = () => {\n    setCurrentTopics((previousTopics) =>\n      Object.keys(previousTopics).reduce(\n        (acc, key) => ({ ...acc, [key]: getRandomIndex(topics[key].length) }),\n        {}\n      )\n    );\n  };\n\n  const currentTopics = idOrder.map((id) => {\n    return {\n      title: topicDictionary[id],\n      topic: topics[id][rawCurrentTopics[id]]\n    };\n  });\n\n  return [currentTopics, generateNewTopics];\n};\n","import \"antd/dist/antd.css\";\nimport { Layout, Typography, List, Button } from \"antd\";\nimport { useRandomTopics } from \"./useRandomTopics\";\nimport \"./app.css\"\n\nconst { Header, Content, Footer } = Layout;\n\nexport default function App() {\n  const [currentTopics, generateNewTopics] = useRandomTopics();\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <Typography.Title level={2} className=\"title\">\n          Генератор тем для итогового сочинения 2021\n        </Typography.Title>\n      </Header>\n      <Content className=\"content\">\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={currentTopics}\n          renderItem={(item) => (\n            <List.Item>\n              <List.Item.Meta title={item.title} description={item.topic} />\n            </List.Item>\n          )}\n        />\n        <Button onClick={generateNewTopics}>Сгенерирновать новые темы</Button>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        <a href=\"https://github.com/dan-maximov\" rel=\"noreferrer noopener\" target=\"_blank\">\n          Daniel Maximov 2021\n        </a>\n      </Footer>\n    </Layout>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}